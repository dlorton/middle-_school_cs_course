# Unit 3 Implementation Guide — Loops and Patterns
For 45-minute class periods (Weeks 6–8). This guide expands on `for` loops, `while` loops, nested loops, and the unit's projects: FizzBuzz Remix, Number Guessing Game, and Turtle Art.

Audience: Middle school beginners using Replit (recommended) or Thonny.

---

## Goals for Unit 3
- Students can use `for` loops with `range()` to repeat actions a specific number of times.
- Students can use `while` loops to repeat actions as long as a condition is true.
- Students can identify the three parts of a `while` loop: initialization, condition, and update.
- Students can create patterns and grids using nested loops.
- Students can debug common loop errors, especially "off-by-one" errors.
- Students will build two main projects: a functional Number Guessing Game and a piece of generative Turtle Art.

---

## Key Concepts Explained (for Middle Schoolers)

- **Loops:** A way to make the computer do something over and over without you having to copy and paste code.
- **`for` loop (with `range`):** The "counting loop." Use this when you know exactly how many times you want to repeat something.
  - *Analogy:* Doing 10 jumping jacks. You know the exact number before you start.
  - `for i in range(5):` means "do this 5 times" (for i = 0, 1, 2, 3, 4).
- **`while` loop:** The "sentinel" or "conditional loop." Use this when you want to repeat something *until* a condition changes.
  - *Analogy:* Keep drinking water *while* you are still thirsty. You don't know how many sips it will take.
  - It needs three parts:
    1.  **Initialize:** Set up the variable before the loop (e.g., `guesses_left = 10`).
    2.  **Condition:** The test that keeps the loop going (e.g., `while guesses_left > 0:`).
    3.  **Update:** Change the variable inside the loop to eventually make it stop (e.g., `guesses_left = guesses_left - 1`). Forgetting this causes an **infinite loop**!
- **Nested Loops:** A loop inside another loop. The inner loop runs all its repetitions for each *one* repetition of the outer loop.
  - *Analogy:* The hands on a clock. The minute hand (inner loop) has to go around 60 times for the hour hand (outer loop) to move just once.
- **Off-by-One Error:** A very common bug where your loop runs one too many or one too few times. Often happens because `range(5)` stops *before* 5 (at 4).

---

## Materials and Prep
- Projector for live demos of loops and patterns.
- Slides or board notes for `for` vs. `while` and the structure of a `while` loop.
- Starter code for the Number Guessing Game and Turtle Art projects.

---

## Session-by-Session Flow (45 minutes each)

### Week 6, Session A: `for` and `while` loops
- **5 min — Bell Ringer:** "How would you print 'Hello' 100 times without copy-pasting?"
- **12 min — Mini-Lesson:**
  - Introduce `for i in range(x):` for counting. Show `range(5)`, `range(1, 6)`, and `range(0, 10, 2)`.
  - Introduce the `while` loop structure (initialize, condition, update). Contrast it with `for` loops.
- **25 min — Guided Practice:**
  - **Task 1: Countdown.** Use a `for` loop to print a countdown from 10 to 1, then "Liftoff!".
  - **Task 2: Times Table Printer.** Use a `for` loop to print the 7s times table (7x1, 7x2, ... 7x10).
  - **Task 3: Revisit Countdown.** Re-write the countdown using a `while` loop.
- **3 min — Exit Ticket:** "When would you use a `for` loop instead of a `while` loop?"

### Week 6, Session B: Nested Loops and FizzBuzz
- **5 min — Bell Ringer:** "Predict the output:"
  ```python
  for i in range(2):
      for j in range(3):
          print(f"i={i}, j={j}")
  ```
- **12 min — Mini-Lesson:**
  - Explain nested loops using the clock analogy.
  - Live code a simple grid pattern (e.g., a 3x3 square of asterisks `*`).
- **25 min — Mini-Project: FizzBuzz Remix**
  - **The Goal:** Loop from 1 to 30.
    - If the number is divisible by 3, print "Fizz" (or an emoji  fizzing:  fizz: :boom:).
    - If the number is divisible by 5, print "Buzz" (or a bee emoji: :bee:).
    - If it's divisible by BOTH 3 and 5, print "FizzBuzz" (:boom::bee:).
    - Otherwise, just print the number.
  - **Hint:** The modulo operator (`%`) is key! `num % 3 == 0` checks if `num` is divisible by 3.
- **3 min — Exit Ticket:** "What operator do you use to check for divisibility?"

### Week 6, Session C (Optional): Debugging Clinic
- **Focus:** Common loop bugs.
- **Task 1: The Off-by-One.** Show a loop that's supposed to print 1-10 but only prints 1-9. Have students fix it.
- **Task 2: The Infinite Loop.** Show a `while` loop missing its update step. Run it and have students "kill" the program, then fix the code.
- **Task 3: FizzBuzz Polish.** Have students add custom rules to their FizzBuzz (e.g., if divisible by 7, print "Bazz").

---

### Week 7, Session A: Number Guessing Game - Plan
- **5 min — Bell Ringer:** "If you were designing a number guessing game, what information would you need to track?" (Answer: secret number, user's guess, number of attempts, etc.).
- **15 min — Project Kickoff: Number Guessing Game**
  - **The Goal:** The computer picks a random number between 1 and 100. The player has a limited number of tries to guess it. The computer gives "too high" or "too low" feedback.
  - **Step 1: Plan Features (as a class).**
    - Must-Haves: random number, loop for guesses, high/low feedback, win/lose message.
    - Should-Haves: attempt counter, replay option.
    - Nice-to-Haves: input validation (is it a number?), different difficulty levels.
  - **Step 2: Pseudocode.** Write out the logic in plain English comments.
- **25 min — Start Coding:**
  - Students use the `guessing_game_starter.py` file to set up the basic structure: import `random`, generate the secret number, and create the main `while` loop.
- **3 min — Exit Ticket:** "What kind of loop is better for the guessing game: `for` or `while`? Why?"

### Week 7, Session B: Number Guessing Game - Build
- **Focus:** Full implementation session.
- **Task:** Students write the core logic inside their `while` loop:
  1. Ask the user for their guess (and convert to `int`).
  2. Use `if/elif/else` to check if the guess is too high, too low, or correct.
  3. If correct, print a win message and `break` the loop.
  4. If incorrect, print feedback and decrease the number of attempts left.
- **End Goal:** A playable game, even if it's not polished.

### Week 7, Session C (Optional): Polish and Refine
- **Focus:** Add the "should-have" and "nice-to-have" features.
- **Task 1: Input Validation.** Wrap the `input()` in a `try/except` block or use `.isdigit()` to prevent the game from crashing if the user enters text.
- **Task 2: Replay Loop.** Wrap the entire game in another `while` loop to ask the user if they want to play again.
- **Task 3: Difficulty Levels.** Ask the user at the start if they want "easy" (more guesses) or "hard" (fewer guesses) and set the `attempts` variable accordingly.

---

### Week 8, Session A: Turtle Looped Art
- **5 min — Bell Ringer:** "How could you use a `for` loop to draw a square with Turtle without writing `forward` and `right` four times?"
- **15 min — Mini-Lesson:**
  - Show how to put turtle commands inside a `for` loop to draw regular polygons (squares, hexagons, etc.).
  - Introduce the idea of changing a variable *inside* the loop to create spirals or other patterns.
    ```python
    # Simple Spiral
    for i in range(50):
        turtle.forward(5 + i) # The distance gets bigger each time
        turtle.right(15)
    ```
- **25 min — Project: Turtle Spirograph/Pattern Drawer**
  - **Goal:** Create a piece of generative art using loops. It must use at least one `for` loop and change a variable (like color, angle, or distance) inside the loop.
  - Students can experiment with the `turtle_art_starter.py` file.
- **3 min — Exit Ticket:** "What does changing the angle inside a turtle loop do?"

### Week 8, Session B: Submission and Reflection
- **20 min — Final Polish:** Students finalize both their Number Guessing Game and their Turtle Art. They should add comments explaining their code.
- **20 min — Submission and Gallery Walk:**
  - Students submit links/files for both projects.
  - **Gallery Walk:** The teacher pulls up several Turtle Art projects on the projector, and students briefly explain the loop that created the pattern.
- **5 min — Reflection:** Students write a short reflection on which project they found more challenging and what they learned about loops from it.

### Week 8, Session C (Optional): Code Annotation
- **Focus:** Reading and understanding code.
- **Task:** Students swap their Turtle Art code with a partner. Their job is to add comments to their partner's code explaining what each line does. This forces them to analyze the loop's structure and its effect on the drawing.

---

## Starter Files

### `guessing_game_starter.py`
```python
import random

# --- Game Setup ---
# 1. Generate a random secret number between 1 and 100.
secret_number = random.randint(1, 100)

# 2. Set the number of attempts the player has.
attempts_left = 10

print("--- Number Guessing Game ---")
print("I'm thinking of a number between 1 and 100.")
print(f"You have {attempts_left} attempts to guess it.")

# --- Main Game Loop ---
# Use a while loop that continues as long as attempts_left > 0.
while attempts_left > 0:
    # Ask the user for their guess and convert it to an integer.
    try:
        guess = int(input("Enter your guess: "))
    except ValueError:
        print("That's not a number! Please enter a valid number.")
        continue # Skip the rest of this loop iteration

    # Decrease the number of attempts left.
    attempts_left = attempts_left - 1

    # Use if/elif/else to check the guess.
    if guess < secret_number:
        print("Too low!")
    elif guess > secret_number:
        print("Too high!")
    else:
        print(f"You got it! The number was {secret_number}.")
        break # Exit the loop since they won

    print(f"You have {attempts_left} attempts left.")

# After the loop, check if they won or lost.
# The 'else' on a 'while' loop runs only if the loop finished without a 'break'.
else:
    print(f"\nGame over! You ran out of attempts. The secret number was {secret_number}.")

# Optional: Add a replay loop here!
```

### `turtle_art_starter.py`
```python
import turtle
import random

# --- Setup the Screen and Turtle ---
screen = turtle.Screen()
screen.bgcolor("black")
pen = turtle.Turtle()
pen.speed(0) # 0 is the fastest speed
pen.hideturtle()

# --- Your Art Code Here ---
# Try creating a cool pattern using a loop.
# Experiment by changing colors, angles, and distances!

# Example 1: A Colorful Starburst
colors = ["red", "orange", "yellow", "green", "blue", "purple"]
for i in range(36):
    pen.pencolor(random.choice(colors)) # Pick a random color
    pen.forward(200)
    pen.left(170)

# Example 2: A Nested Spiral
# for i in range(72):
#     pen.pencolor(colors[i % 6])
#     pen.forward(i * 3)
#     pen.right(45)
#     for j in range(2):
#         pen.forward(i)
#         pen.right(60)


# This keeps the window open until you click on it.
screen.exitonclick()
```
